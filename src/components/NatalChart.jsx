import React, { useState, useEffect, useRef, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import DetailedInterpretation from "./DetailedInterpretation";
import AspectInterpretation from "./AspectInterpretation";

const zodiacSigns = [
  "‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", 
  "‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì"
];

const zodiacSymbols = {
  "–û–≤–µ–Ω": "‚ôà",
  "–¢–µ–ª–µ—Ü": "‚ôâ",
  "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä",
  "–†–∞–∫": "‚ôã",
  "–õ–µ–≤": "‚ôå",
  "–î–µ–≤–∞": "‚ôç",
  "–í–µ—Å—ã": "‚ôé",
  "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè",
  "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê",
  "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë",
  "–í–æ–¥–æ–ª–µ–π": "‚ôí",
  "–†—ã–±—ã": "‚ôì"
};

const planetIcons = {
  –°–æ–ª–Ω—Ü–µ: "‚òÄÔ∏è",
  –õ—É–Ω–∞: "üåô",
  –ú–µ—Ä–∫—É—Ä–∏–π: "‚òøÔ∏è",
  –í–µ–Ω–µ—Ä–∞: "‚ôÄÔ∏è",
  –ú–∞—Ä—Å: "‚ôÇÔ∏è",
  –Æ–ø–∏—Ç–µ—Ä: "‚ôÉ",
  –°–∞—Ç—É—Ä–Ω: "‚ôÑ"
};

const aspectIcons = {
  —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: "‚òØÔ∏è",
  –æ–ø–ø–æ–∑–∏—Ü–∏—è: "‚öîÔ∏è",
  —Ç—Ä–∏–Ω: "‚ñ≥",
  –∫–≤–∞–¥—Ä–∞—Ç: "‚ñ°",
  —Å–µ–∫—Å—Ç–∏–ª—å: "‚ú∂"
};

const aspectColors = {
  "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ": "rgba(147, 51, 234, 0.3)",  // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
  "—Ç—Ä–∏–Ω": "rgba(16, 185, 129, 0.3)",        // –ó–µ–ª–µ–Ω—ã–π
  "–∫–≤–∞–¥—Ä–∞—Ç": "rgba(239, 68, 68, 0.3)",      // –ö—Ä–∞—Å–Ω—ã–π
  "–æ–ø–ø–æ–∑–∏—Ü–∏—è": "rgba(245, 158, 11, 0.3)",    // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  "—Å–µ–∫—Å—Ç–∏–ª—å": "rgba(59, 130, 246, 0.3)"     // –ì–æ–ª—É–±–æ–π
};

export const planetColors = {
  "–°–æ–ª–Ω—Ü–µ": "#FFB74D",    // –¢–µ–ø–ª—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
  "–õ—É–Ω–∞": "#90CAF9",      // –ù–µ–∂–Ω—ã–π –≥–æ–ª—É–±–æ–π
  "–ú–µ—Ä–∫—É—Ä–∏–π": "#81C784",  // –°–ø–æ–∫–æ–π–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
  "–í–µ–Ω–µ—Ä–∞": "#F48FB1",    // –ú—è–≥–∫–∏–π —Ä–æ–∑–æ–≤—ã–π
  "–ú–∞—Ä—Å": "#EF5350",      // –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
  "–Æ–ø–∏—Ç–µ—Ä": "#7E57C2",    // –ì–ª—É–±–æ–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  "–°–∞—Ç—É—Ä–Ω": "#78909C"     // –°–µ—Ä–æ-–≥–æ–ª—É–±–æ–π
};

export const planetSymbols = {
  "–°–æ–ª–Ω—Ü–µ": "‚òâ",
  "–õ—É–Ω–∞": "‚òΩ",
  "–ú–µ—Ä–∫—É—Ä–∏–π": "‚òø",
  "–í–µ–Ω–µ—Ä–∞": "‚ôÄ",
  "–ú–∞—Ä—Å": "‚ôÇ",
  "–Æ–ø–∏—Ç–µ—Ä": "‚ôÉ",
  "–°–∞—Ç—É—Ä–Ω": "‚ôÑ"
};

export default function NatalChart({ data }) {
  const [selectedPlanet, setSelectedPlanet] = useState(null);
  const [selectedAspect, setSelectedAspect] = useState(null);
  const chartRef = useRef(null);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –≥—Ä–∞–¥—É—Å—É
  const getZodiacSign = (degree) => {
    const normalizedDegree = ((degree % 360) + 360) % 360;
    const signIndex = Math.floor(normalizedDegree / 30);
    return zodiacSigns[signIndex];
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –∫—Ä—É–≥–µ
  const calculatePosition = (degree, radius = 150) => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–∞–¥—É—Å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–∞–¥–∏–∞–Ω—ã
    const normalizedDegree = ((degree % 360) + 360) % 360;
    const angleInRadians = ((normalizedDegree - 90) * Math.PI) / 180;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    return {
      x: 200 + radius * Math.cos(angleInRadians),
      y: 200 + radius * Math.sin(angleInRadians)
    };
  };

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—ã –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º (30 –≥—Ä–∞–¥—É—Å–æ–≤ –∫–∞–∂–¥—ã–π)
  const groupPlanetsBySector = (planets) => {
    if (!planets) return Array(12).fill().map(() => []);
    
    const sectors = Array(12).fill().map(() => []);
    
    Object.entries(planets).forEach(([planet, data]) => {
      const normalizedDegree = ((data.longitude % 360) + 360) % 360;
      const sectorIndex = Math.floor(normalizedDegree / 30);
      sectors[sectorIndex].push({ planet, degree: normalizedDegree });
    });
    
    return sectors;
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç —Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  const calculatePlanetPositions = (planets) => {
    if (!planets) return {};
    
    const sectors = groupPlanetsBySector(planets);
    const positions = {};
    
    sectors.forEach((sector, sectorIndex) => {
      if (sector.length === 0) return;
      
      // –ë–∞–∑–æ–≤—ã–π —É–≥–æ–ª –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
      const baseAngle = sectorIndex * 30;
      
      // –ï—Å–ª–∏ –≤ —Å–µ–∫—Ç–æ—Ä–µ –æ–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞
      if (sector.length === 1) {
        const { planet, degree } = sector[0];
        positions[planet] = calculatePosition(degree);
        return;
      }
      
      // –ï—Å–ª–∏ –≤ —Å–µ–∫—Ç–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –ø–æ —Ä–∞–¥–∏—É—Å—É
      sector.forEach(({ planet, degree }, index) => {
        const radiusOffset = index * 15; // –°–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é —Å–ª–µ–¥—É—é—â—É—é –ø–ª–∞–Ω–µ—Ç—É –Ω–∞ 15 –ø–∏–∫—Å–µ–ª–µ–π
        positions[planet] = calculatePosition(degree, 150 - radiusOffset);
      });
    });
    
    return positions;
  };

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é useMemo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const planetPositions = useMemo(() => calculatePlanetPositions(data?.planets), [data?.planets]);

  if (!data || !data.planets) {
    return (
      <div className="text-indigo-900/80 text-center py-4">
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∏–Ω–∏–∏ –∞—Å–ø–µ–∫—Ç–∞
  const renderAspectLine = (pos1, pos2, aspect, isSelected) => {
    if (!pos1 || !pos2) return null;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏
    const dx = pos2.x - pos1.x;
    const dy = pos2.y - pos1.y;
    const distance = Math.sqrt(dx * dx + dy * dy);
    
    // –ï—Å–ª–∏ –ø–ª–∞–Ω–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ, –Ω–µ —Ä–∏—Å—É–µ–º –∞—Å–ø–µ–∫—Ç
    if (distance < 30) return null;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
    const nx = dx / distance;
    const ny = dy / distance;
    
    // –û—Ç—Å—Ç—É–ø–∞–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–æ–≤ –ø–ª–∞–Ω–µ—Ç
    const offset = 20;
    const startX = pos1.x + nx * offset;
    const startY = pos1.y + ny * offset;
    const endX = pos2.x - nx * offset;
    const endY = pos2.y - ny * offset;

    return {
      x1: startX,
      y1: startY,
      x2: endX,
      y2: endY
    };
  };

  return (
    <div className="relative w-[400px] h-[400px] mx-auto bg-white/5 backdrop-blur-sm rounded-full p-4" ref={chartRef}>
      <svg className="absolute inset-0" viewBox="0 0 400 400">
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ */}
        <circle
          cx="200"
          cy="200"
          r="180"
          fill="none"
          stroke="rgba(79, 70, 229, 0.1)"
          strokeWidth="1"
        />
        <circle
          cx="200"
          cy="200"
          r="150"
          fill="none"
          stroke="rgba(79, 70, 229, 0.1)"
          strokeWidth="1"
        />

        {/* –°–µ–∫—Ç–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ */}
        {Array.from({ length: 12 }).map((_, i) => {
          const startAngle = i * 30;
          const endAngle = (i + 1) * 30;
          const startPos = calculatePosition(startAngle, 180);
          const midPos = calculatePosition(startAngle + 15, 165);
          
          return (
            <g key={`zodiac-${i}`}>
              <line
                x1="200"
                y1="200"
                x2={startPos.x}
                y2={startPos.y}
                stroke="rgba(79, 70, 229, 0.1)"
                strokeWidth="1"
              />
              <text
                x={midPos.x}
                y={midPos.y}
                textAnchor="middle"
                dominantBaseline="middle"
                className="fill-indigo-900/60 text-[14px]"
              >
                {zodiacSigns[i]}
              </text>
            </g>
          );
        })}

        {/* –ê—Å–ø–µ–∫—Ç—ã */}
        {data.aspects && data.aspects.map((aspect, index) => {
          const pos1 = planetPositions[aspect.planet1];
          const pos2 = planetPositions[aspect.planet2];
          const isSelected = selectedAspect === index;
          
          const lineCoords = renderAspectLine(pos1, pos2, aspect.aspect, isSelected);
          if (!lineCoords) return null;
          
          return (
            <motion.line
              key={`aspect-${index}`}
              {...lineCoords}
              stroke={aspectColors[aspect.aspect]}
              strokeWidth={isSelected ? "3" : "2"}
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ 
                pathLength: 1, 
                opacity: isSelected ? 0.8 : 0.4,
                strokeWidth: isSelected ? 3 : 2
              }}
              transition={{ duration: 1, delay: 0.5 + index * 0.1 }}
              onMouseEnter={() => setSelectedAspect(index)}
              onMouseLeave={() => setSelectedAspect(null)}
              style={{ cursor: "pointer" }}
            />
          );
        })}
      </svg>

      {/* –ü–ª–∞–Ω–µ—Ç—ã */}
      {Object.entries(data.planets).map(([planet, position]) => {
        const pos = planetPositions[planet];
        const isSelected = selectedPlanet === planet;
        if (!pos) return null;

        return (
          <motion.div
            key={planet}
            className="absolute w-8 h-8 -ml-4 -mt-4 flex items-center justify-center"
            style={{
              left: pos.x,
              top: pos.y,
              zIndex: isSelected ? 10 : 1
            }}
            initial={{ opacity: 0, scale: 0 }}
            animate={{ 
              opacity: 1, 
              scale: isSelected ? 1.2 : 1,
              filter: `drop-shadow(0 0 ${isSelected ? '8px' : '4px'} ${planetColors[planet]})`
            }}
            transition={{ duration: 0.5, delay: 0.3 }}
            onMouseEnter={() => setSelectedPlanet(planet)}
            onMouseLeave={() => setSelectedPlanet(null)}
          >
            <div className="relative group">
              <div 
                className="w-8 h-8 rounded-full flex items-center justify-center bg-white shadow-md border-2 transition-transform transform-gpu hover:scale-110"
                style={{ borderColor: planetColors[planet] }}
              >
                <span 
                  className="text-lg font-bold"
                  style={{ color: planetColors[planet] }}
                >
                  {planetSymbols[planet]}
                </span>
              </div>
              <motion.div 
                className="absolute -bottom-6 left-1/2 transform -translate-x-1/2 bg-white px-2 py-1 rounded-md shadow-sm text-xs whitespace-nowrap"
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: isSelected ? 1 : 0, y: isSelected ? 0 : -10 }}
                transition={{ duration: 0.2 }}
              >
                {planet} {Math.round(position.longitude)}¬∞ {getZodiacSign(position.longitude)}
              </motion.div>
            </div>
          </motion.div>
        );
      })}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å–ø–µ–∫—Ç–∞—Ö */}
      {selectedAspect !== null && data.aspects[selectedAspect] && (
        <motion.div
          className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-4 py-2 rounded-lg shadow-lg text-sm"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
        >
          <div className="flex items-center gap-2">
            <span style={{ color: planetColors[data.aspects[selectedAspect].planet1] }}>
              {planetSymbols[data.aspects[selectedAspect].planet1]}
            </span>
            <span className="text-indigo-900">
              {data.aspects[selectedAspect].aspect}
            </span>
            <span style={{ color: planetColors[data.aspects[selectedAspect].planet2] }}>
              {planetSymbols[data.aspects[selectedAspect].planet2]}
            </span>
          </div>
        </motion.div>
      )}
    </div>
  );
}

function getPlanetEmoji(name) {
  const icons = {
    "–°–æ–ª–Ω—Ü–µ": "‚òÄÔ∏è",
    "–õ—É–Ω–∞": "üåô",
    "–ú–µ—Ä–∫—É—Ä–∏–π": "‚òøÔ∏è",
    "–í–µ–Ω–µ—Ä–∞": "‚ôÄÔ∏è",
    "–ú–∞—Ä—Å": "‚ôÇÔ∏è",
    "–Æ–ø–∏—Ç–µ—Ä": "‚ôÉ",
    "–°–∞—Ç—É—Ä–Ω": "‚ôÑ",
    "–£—Ä–∞–Ω": "‚ôÖ",
    "–ù–µ–ø—Ç—É–Ω": "‚ôÜ",
    "–ü–ª—É—Ç–æ–Ω": "‚ôá"
  };
  return icons[name] || "‚ú®";
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å–∞–π–∑–∞
function debounce(func, wait) {
  let timeout;
  const debouncedFunction = function(...args) {
    const context = this;
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(context, args), wait);
  };
  debouncedFunction.cancel = function() {
    clearTimeout(timeout);
  };
  return debouncedFunction;
}
